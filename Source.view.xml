<mvc:View
    controllerName="com.tableentry.tablestructure.controller.Table_Entry"
    xmlns:mvc="sap.ui.core.mvc"
    xmlns="sap.m"
    xmlns:l="sap.ui.layout"
    xmlns:f="sap.f"
    xmlns:core="sap.ui.core">

    <f:FlexibleColumnLayout id="flexibleColumnLayout" layout="OneColumn">
        <f:beginColumnPages>
            <Page id="productsPage" title="Source List Portal">
                <l:VerticalLayout id="_IDGenVerticalLayout" width="100%">
                    <!-- Search Bar and Filters -->
                    <Toolbar id="searchToolbar">
                        <Label id="requestIdLabel" text="Request ID:" />
                        <SearchField id="searchField" width="15%" placeholder="Request ID" search=".onSearch" />
                        <Label id="materialLabel" text="Material:" />
                        <Input id="materialInput" width="15%" placeholder="Enter Material ..." />
                        <Label id="vendorLabel" text="Vendor:" />
                        <Input id="vendorInput" width="15%" placeholder="Enter Vendor ..." />
                        <Label id="statusLabel" text="Status:" />
                        <ComboBox id="statusComboBox" width="15%" placeholder="Select Status" selectionChange=".onStatusChange">
                            <core:Item id="_IDGenItem1" key="All" text="All" />
                            <core:Item id="_IDGenItem2" key="Draft" text="Draft" />
                            <core:Item id="_IDGenItem3" key="Send Back" text="Send Back" />
                            <core:Item id="_IDGenItem4" key="Rejected" text="Rejected" />
                            <core:Item id="_IDGenItem5" key="Pending Request" text="Pending Request" />
                            <core:Item id="_IDGenItem6" key="Approved" text="Approved" />
                        </ComboBox>
                        <Button id="clearButton" text="Clear" press=".onClearPress" />
                    </Toolbar>

                    <!-- Launch Tiles -->
                    <l:Grid id="tileGrid" defaultSpan="XL2 L2 M4 S6" hSpacing="1" vSpacing="1">
                        <l:content>
                            <GenericTile id="draftTile" header="My Draft Request" press=".onTilePress" class="customTile">
                                <TileContent id="_IDGenTileContent1">
                                    <NumericContent id="_IDGenNumericContent1" value="{products>/draftCount}" valueColor="Neutral" />
                                </TileContent>
                            </GenericTile>
                            <GenericTile id="sentBackTile" header="Sent Back Request" press=".onTilePress" class="customTile">
                                <TileContent id="_IDGenTileContent2">
                                    <NumericContent id="_IDGenNumericContent2" value="{products>/sentBackCount}" valueColor="Neutral" />
                                </TileContent>
                            </GenericTile>
                            <GenericTile id="rejectedTile" header="Rejected Request" press=".onTilePress" class="customTile">
                                <TileContent id="_IDGenTileContent3">
                                    <NumericContent id="_IDGenNumericContent3" value="{products>/rejectedCount}" valueColor="Error" />
                                </TileContent>
                            </GenericTile>
                            <GenericTile id="inProgressTile" header="In-Progress Request" press=".onTilePress" class="customTile">
                                <TileContent id="_IDGenTileContent4">
                                    <NumericContent id="_IDGenNumericContent4" value="{products>/inProgressCount}" valueColor="Critical" />
                                </TileContent>
                            </GenericTile>
                            <GenericTile id="allTile" header="All Requests" press=".onTilePress" class="customTile">
                                <TileContent id="_IDGenTileContent5">
                                    <NumericContent id="_IDGenNumericContent5" value="{products>/allCount}" valueColor="Good" />
                                </TileContent>
                            </GenericTile>
                        </l:content>
                    </l:Grid>

                    <!-- Toolbar with Action Buttons -->
                    <Toolbar id="_IDGenToolbar">
                        <ToolbarSpacer id="_IDGenToolbarSpacer" />
                        <Button id="fullScreenButton" icon="sap-icon://full-screen" press=".onFullScreenPress" />
                        <Button id="exitFullScreenButton" icon="sap-icon://exit-full-screen" press=".onExitFullScreenPress" visible="false" />
                        <Button id="downloadButton" icon="sap-icon://download" press=".onDownloadPress" />
                        <Button id="uploadButton" icon="sap-icon://upload" press=".onUploadPress" />
                    </Toolbar>

                    <!-- Table -->
                    <Table
                        id="productsTable"
                        items="{products>/items}"
                        width="auto"
                        mode="SingleSelectLeft"
                        selectionChange=".onTableSelectionChange">
                        <columns>
                            <Column id="_IDGenColumn">
                                <Text id="_IDGenText" text="Request ID" />
                            </Column>
                            <Column id="_IDGenColumn1">
                                <Text id="_IDGenText1" text="Created By" />
                            </Column>
                            <Column id="_IDGenColumn2">
                                <Text id="_IDGenText2" text="Created On" />
                            </Column>
                            <Column id="_IDGenColumn3">
                                <Text id="_IDGenText3" text="Purchase Organization" />
                            </Column>
                            <Column id="_IDGenColumn4">
                                <Text id="_IDGenText4" text="Status" />
                            </Column>
                            <Column id="_IDGenColumn5">
                                <Text id="_IDGenText5" text="Pending With" />
                            </Column>
                            <Column id="_IDGenColumn6">
                                <Text id="_IDGenText6" text="Request Aging" />
                            </Column>
                            <Column id="_IDGenColumn7">
                                <Text id="_IDGenText7" text="Actions" />
                            </Column>
                        </columns>
                        <items>
                            <ColumnListItem id="_IDGenColumnListItem">
                                <cells>
                                    <Text id="_IDGenText8" text="{products>requestId}" />
                                    <Text id="_IDGenText9" text="{products>createdBy}" />
                                    <Text id="_IDGenText10" text="{products>createdOn}" />
                                    <Text id="_IDGenText11" text="{products>purchaseOrg}" />
                                    <ObjectStatus id="_IDGenStatus" text="{products>status}" state="{= ${products>status} === 'Approved' ? 'Success' : ${products>status} === 'Rejected' ? 'Error' : ${products>status} === 'Send Back' ? 'Warning' : 'None'}" />
                                    <Text id="_IDGenText12" text="{products>pendingWith}" />
                                    <Text id="_IDGenText13" text="{products>requestAging}" />
                                    <HBox id="_IDGenHBox">
                                        <Button id="_IDGenEditButton" icon="sap-icon://edit" press=".onEditPress" type="Transparent" />
                                        <Button id="_IDGenDeleteButton" icon="sap-icon://delete" press=".onDeletePress" type="Transparent" />
                                    </HBox>
                                </cells>
                            </ColumnListItem>
                        </items>
                    </Table>

                    <!-- Create New Source List Button -->
                    <Toolbar id="_IDGenToolbar1">
                        <ToolbarSpacer id="_IDGenToolbarSpacer1" />
                        <Button id="_IDGenButton2" text="Create New Source List" press=".onOrderPress" />
                    </Toolbar>
                </l:VerticalLayout>
            </Page>
        </f:beginColumnPages>
        <f:midColumnPages>
            <Page id="detailPage" title="Request Details">
                <l:VerticalLayout id="detailLayout" width="100%">
                    <Text id="detailText" />
                </l:VerticalLayout>
            </Page>
        </f:midColumnPages>
    </f:FlexibleColumnLayout>
</mvc:View>





SORTING CODE 

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageBox",
    "sap/m/MessageToast",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter"  // Added Sorter dependency
], function (Controller, JSONModel, MessageBox, MessageToast, Filter, FilterOperator, Sorter) {
    "use strict";

    return Controller.extend("com.tableentry.tablestructure.controller.Table_Entry", {
        onInit: function () {
            var oData = {
                items: [
                    { requestId: "RM0000001", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "11000", status: "Send Back", pendingWith: "PH1@pdilite.coPH1@pdilite.com", requestAging: "Send Back" },
                    { requestId: "RM0000005", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "15000", status: "Send Back", pendingWith: "PH1@pdilite.coPH1@pdilite.com", requestAging: "Send Back" },
                    { requestId: "RM0000008", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "19000", status: "Send Back", pendingWith: "PH1@pdilite.coPH1@pdilite.com", requestAging: "Send Back" },
                    { requestId: "RM0000009", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "10000", status: "Pending Request", pendingWith: "PH1@pdilite.coPH1@pdilite.com", requestAging: "Pending Request" },
                    { requestId: "RM0000009", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "10000", status: "Pending Request", pendingWith: "PH1@pdilite.coPH1@pdilite.com", requestAging: "Pending Request" },
                    { requestId: "RM0000009", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "10000", status: "Pending Request", pendingWith: "PH1@pdilite.coPH1@pdilite.com", requestAging: "Pending Request" },
                    { requestId: "RM0000012", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "113000", status: "Rejected", pendingWith: "PH1@pdilite.com", requestAging: "Rejected" },
                    { requestId: "RM0000017", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "118000", status: "Rejected", pendingWith: "PH1@pdilite.com", requestAging: "Rejected" },
                    { requestId: "RM0000017", createdBy: "Buyer", createdOn: "Feb 02, 2025", purchaseOrg: "118000", status: "Rejected", pendingWith: "PH1@pdilite.com", requestAging: "Rejected" },
                    { requestId: "RM0000027", createdBy: "Buyer", createdOn: "Feb 03, 2025", purchaseOrg: "128000", status: "Approved", pendingWith: "PH3@pdilite.com", requestAging: "Approved" },
                    { requestId: "RM0000028", createdBy: "Buyer", createdOn: "Feb 03, 2025", purchaseOrg: "129000", status: "Approved", pendingWith: "PH3@pdilite.com", requestAging: "Approved" },
                    { requestId: "RM0000028", createdBy: "Buyer", createdOn: "Feb 03, 2025", purchaseOrg: "129000", status: "Approved", pendingWith: "PH3@pdilite.com", requestAging: "Approved" },
                    { requestId: "RM0000035", createdBy: "Buyer", createdOn: "Feb 03, 2025", purchaseOrg: "136000", status: "Draft", pendingWith: "PH3@pdilite.com", requestAging: "Draft" },
                    { requestId: "RM0000035", createdBy: "Buyer", createdOn: "Feb 03, 2025", purchaseOrg: "136000", status: "Draft", pendingWith: "PH3@pdilite.com", requestAging: "Draft" },
                    { requestId: "RM0000036", createdBy: "Buyer", createdOn: "Feb 03, 2025", purchaseOrg: "137000", status: "Draft", pendingWith: "PH3@pdilite.com", requestAging: "Draft" }
                ],
                draftCount: 0,
                sentBackCount: 0,
                rejectedCount: 0,
                inProgressCount: 0,
                allCount: 0
            };

            this._bDescendingSort = false;  // Initialize sort direction
            this._sCurrentSortField = null;  // Track current sort field
            this._sCurrentGroupField = null; // Track current group field

            this._updateTileCounts(oData);
            var oModel = new JSONModel(oData);
            this.getView().setModel(oModel, "products");
        },

        _updateTileCounts: function (oData) {
            var aItems = oData.items;
            oData.draftCount = aItems.filter(item => item.status === "Draft").length;
            oData.sentBackCount = aItems.filter(item => item.status === "Send Back").length;
            oData.rejectedCount = aItems.filter(item => item.status === "Rejected").length;
            oData.inProgressCount = aItems.filter(item => item.status === "Pending Request").length;
            oData.allCount = aItems.length;
        },

        onSort: function (oEvent) {
            var oTable = this.byId("productsTable");
            var oBinding = oTable.getBinding("items");
            var sPath = "requestId"; // Default sort field, can be made dynamic

            this._bDescendingSort = !this._bDescendingSort;
            this._sCurrentSortField = sPath;

            var oSorter = new Sorter({
                path: sPath,
                descending: this._bDescendingSort,
                group: false
            });

            oBinding.sort(oSorter);
            this._updateColumnHeader(sPath);
            MessageToast.show(`Sorted by Request ID: ${this._bDescendingSort ? "Descending" : "Ascending"}`);
        },

        onGroup: function (oEvent) {
            var oTable = this.byId("productsTable");
            var oBinding = oTable.getBinding("items");
            var sPath = "status"; // Default group field, can be made dynamic

            if (this._sCurrentGroupField === sPath) {
                // Remove grouping
                this._sCurrentGroupField = null;
                oBinding.sort(null);
                this._updateColumnHeader(null);
                MessageToast.show("Grouping removed");
            } else {
                // Apply grouping
                this._sCurrentGroupField = sPath;
                var oSorter = new Sorter({
                    path: sPath,
                    descending: false,
                    group: true,
                    groupHeaderFactory: this._getGroupHeader
                });
                oBinding.sort(oSorter);
                this._updateColumnHeader(sPath);
                MessageToast.show(`Grouped by Status`);
            }
        },

        _getGroupHeader: function (oGroup) {
            return new sap.m.GroupHeaderListItem({
                title: oGroup.key,
                upperCase: false,
                count: oGroup.count
            });
        },

        _updateColumnHeader: function (sPath) {
            var oTable = this.byId("productsTable");
            var aColumns = oTable.getColumns();

            aColumns.forEach(function(oColumn) {
                var oCustomData = oColumn.data("sortProperty");
                var oHeader = oColumn.getHeader();

                if (oCustomData === sPath) {
                    if (this._sCurrentGroupField === sPath) {
                        oHeader.setIcon("sap-icon://group-2");
                        oHeader.setTooltip("Grouped");
                    } else if (this._sCurrentSortField === sPath) {
                        oHeader.setIcon(
                            this._bDescendingSort ? 
                            "sap-icon://sort-descending" : 
                            "sap-icon://sort-ascending"
                        );
                        oHeader.setTooltip(
                            "Sorted " + (this._bDescendingSort ? "Descending" : "Ascending")
                        );
                    }
                } else {
                    oHeader.setIcon("");
                    oHeader.setTooltip("");
                }
            }.bind(this));
        },

        onSearch: function (oEvent) {
            var sQuery = oEvent.getParameter("query");
            var oTable = this.byId("productsTable");
            var oBinding = oTable.getBinding("items");
            var aFilters = [];

            if (sQuery) {
                aFilters.push(new Filter("requestId", FilterOperator.Contains, sQuery));
            }

            oBinding.filter(aFilters);
        },

        onStatusChange: function (oEvent) {
            var sKey = oEvent.getParameter("selectedItem").getKey();
            var oTable = this.byId("productsTable");
            var oBinding = oTable.getBinding("items");
            var aFilters = [];

            if (sKey !== "All") {
                aFilters.push(new Filter("status", FilterOperator.EQ, sKey));
            }

            oBinding.filter(aFilters);
        },

        onTilePress: function (oEvent) {
            var oTile = oEvent.getSource();
            var sTileId = oTile.getId();
            var oTable = this.byId("productsTable");
            var oBinding = oTable.getBinding("items");
            var aFilters = [];

            if (sTileId.includes("draftTile")) {
                aFilters.push(new Filter("status", FilterOperator.EQ, "Draft"));
            } else if (sTileId.includes("sentBackTile")) {
                aFilters.push(new Filter("status", FilterOperator.EQ, "Send Back"));
            } else if (sTileId.includes("rejectedTile")) {
                aFilters.push(new Filter("status", FilterOperator.EQ, "Rejected"));
            } else if (sTileId.includes("inProgressTile")) {
                aFilters.push(new Filter("status", FilterOperator.EQ, "Pending Request"));
            } else if (sTileId.includes("allTile")) {
                oBinding.filter([]);
                return;
            }

            oBinding.filter(aFilters);
        },

        onClearPress: function () {
            this.byId("searchField").setValue("");
            this.byId("materialInput").setValue("");
            this.byId("vendorInput").setValue("");
            this.byId("statusComboBox").setSelectedKey("All");
            var oTable = this.byId("productsTable");
            var oBinding = oTable.getBinding("items");
            oBinding.filter([]);
        },

        onDownloadPress: function () {
            try {
                var oModel = this.getView().getModel("products");
                var aData = oModel.getProperty("/items");

                if (!aData || aData.length === 0) {
                    MessageBox.warning("No data available to download.");
                    return;
                }

                var sJsonData = JSON.stringify(aData, null, 2);
                var oBlob = new Blob([sJsonData], { type: "application/json" });
                var sUrl = URL.createObjectURL(oBlob);
                var oLink = document.createElement("a");

                oLink.href = sUrl;
                oLink.download = "source_list_data_" + new Date().toISOString().slice(0, 10) + ".json";
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);

                MessageToast.show("Download completed successfully!");
            } catch (error) {
                MessageBox.error("Download failed: " + error.message);
                console.error(error);
            }
        },

        onUploadPress: function () {
            var oFileUploader = this.byId("fileUploader");
            oFileUploader.clear();
            oFileUploader.openFilePicker();
        },

        onFileChange: function (oEvent) {
            var oFileUploader = oEvent.getSource();
            var oFile = oEvent.getParameter("files") && oEvent.getParameter("files")[0];

            if (!oFile) {
                MessageBox.error("No file selected.");
                return;
            }

            if (oFile.type !== "application/json") {
                MessageBox.error("Please upload a JSON file.");
                oFileUploader.clear();
                return;
            }

            var oReader = new FileReader();
            oReader.onload = function (e) {
                try {
                    var sResult = e.target.result;
                    var oNewData = JSON.parse(sResult);

                    if (!Array.isArray(oNewData) || !oNewData.every(item =>
                        item.requestId && item.createdBy && item.createdOn && item.purchaseOrg && item.status && item.pendingWith && item.requestAging)) {
                        MessageBox.error("Invalid JSON format. Must contain array of objects with requestId, createdBy, createdOn, purchaseOrg, status, pendingWith, and requestAging.");
                        return;
                    }

                    var oModel = this.getView().getModel("products");
                    oModel.setProperty("/items", oNewData);
                    this._updateTileCounts(oModel.getData());
                    oModel.refresh();
                    MessageToast.show("Upload successful! " + oNewData.length + " items loaded.");

                    oFileUploader.clear();
                } catch (error) {
                    MessageBox.error("Upload failed: " + error.message);
                    console.error(error);
                }
            }.bind(this);

            oReader.onerror = function () {
                MessageBox.error("Error reading file.");
            };

            oReader.readAsText(oFile);
        },

        onUploadComplete: function (oEvent) {
            var sResponse = oEvent.getParameter("response");
            if (sResponse) {
                MessageToast.show("Upload complete: " + sResponse);
            }
        },

        onTableSelectionChange: function (oEvent) {
            var oSelectedItem = oEvent.getParameter("listItem");
            if (oSelectedItem) {
                var oContext = oSelectedItem.getBindingContext("products");
                var oData = oContext.getObject();
                var oDetailLayout = this.byId("detailLayout");

                oDetailLayout.removeAllContent();
                oDetailLayout.addContent(new sap.m.Text({ text: "Request ID: " + oData.requestId }));
                oDetailLayout.addContent(new sap.m.Text({ text: "Created By: " + oData.createdBy }));
                oDetailLayout.addContent(new sap.m.Text({ text: "Created On: " + oData.createdOn }));
                oDetailLayout.addContent(new sap.m.Text({ text: "Purchase Org: " + oData.purchaseOrg }));
                oDetailLayout.addContent(new sap.m.Text({ text: "Status: " + oData.status }));
                oDetailLayout.addContent(new sap.m.Text({ text: "Pending With: " + oData.pendingWith }));
                oDetailLayout.addContent(new sap.m.Text({ text: "Request Aging: " + oData.requestAging }));

                this.byId("flexibleColumnLayout").setLayout("TwoColumnsMidExpanded");
                this.byId("fullScreenButton").setVisible(false);
                this.byId("exitFullScreenButton").setVisible(true);
            }
        },

        onFullScreenPress: function () {
            this.byId("flexibleColumnLayout").setLayout("TwoColumnsMidExpanded");
            this.byId("fullScreenButton").setVisible(false);
            this.byId("exitFullScreenButton").setVisible(true);
        },

        onExitFullScreenPress: function () {
            this.byId("flexibleColumnLayout").setLayout("OneColumn");
            this.byId("fullScreenButton").setVisible(true);
            this.byId("exitFullScreenButton").setVisible(false);
        },

        onEditPress: function (oEvent) {
            var oButton = oEvent.getSource();
            var oItem = oButton.getParent().getParent();
            var aCells = oItem.getCells();
            var oModel = this.getView().getModel("products");
            var oData = oItem.getBindingContext("products").getObject();
            var iIndex = oItem.getParent().indexOfItem(oItem);

            if (oButton.getIcon() === "sap-icon://edit") {
                oButton.setIcon("sap-icon://save");
                for (var i = 0; i < 6; i++) {
                    var oText = aCells[i];
                    if (oText instanceof sap.m.Text) {
                        var oInput = new sap.m.Input({ value: oText.getText() });
                        oItem.removeCell(oText);
                        oItem.insertCell(oInput, i);
                    }
                }
            } else {
                oButton.setIcon("sap-icon://edit");
                for (var i = 0; i < 6; i++) {
                    var oInput = aCells[i];
                    if (oInput instanceof sap.m.Input) {
                        var sValue = oInput.getValue();
                        var oText = new sap.m.Text({ text: sValue });
                        oItem.removeCell(oInput);
                        oItem.insertCell(oText, i);
                        switch (i) {
                            case 0: oData.requestId = sValue; break;
                            case 1: oData.createdBy = sValue; break;
                            case 2: oData.createdOn = sValue; break;
                            case 3: oData.purchaseOrg = sValue; break;
                            case 4: oData.status = sValue; break;
                            case 5: oData.pendingWith = sValue; break;
                        }
                    }
                }
                this._updateTileCounts(oModel.getData());
                oModel.refresh();
                MessageToast.show("Changes saved successfully!");
            }
        },

        onDeletePress: function (oEvent) {
            var oItem = oEvent.getSource().getParent().getParent();
            var oModel = this.getView().getModel("products");
            var aItems = oModel.getProperty("/items");
            var iIndex = oItem.getParent().indexOfItem(oItem);

            aItems.splice(iIndex, 1);
            oModel.setProperty("/items", aItems);
            this._updateTileCounts(oModel.getData());
            oModel.refresh();
            MessageToast.show("Item deleted successfully");
        },

        onOrderPress: function () {
            MessageToast.show("New Source List created successfully!");
        }
    });
});
